<project name="Java CoG Kit -- jglobus" default="alljars" basedir=".">

  <property file="build.properties"/>

  <property name="project"        value="Java Globus"/>

  <property name="cog.src.dir"        value="src"/>
  <property name="cog.dst.dir"        value="${build.dir}/classes"/>

  <property name="cog.doc.dir"       value="${dist.dir}/doc"/>
  <property name="cog.javadoc.dir"    value="${cog.doc.dir}/api"/>

  <property name="cog.jar.filename"        
            value="cog-jglobus-${version}.jar"/>
  <property name="cog.jobmanager.jar.name"   
            value="cog-jobmanager-${version}.jar"/>
  <property name="cog.url.jar.name"   
            value="cog-url-${version}.jar"/>

  <property name="cog.jar.file"        
            value="${build.dir}/${cog.jar.filename}"/>
  <property name="cog.jobmanager.jar.file" 
            value="${build.dir}/${cog.jobmanager.jar.name}"/>
  <property name="cog.url.jar.file" 
            value="${build.dir}/${cog.url.jar.name}"/>

  <property name="cog.jar.lib.file"   value="${build.dir}/cog-lib.jar"/>

  <property name="jars" value = "${cog.jar.file}, ${cog.jar.lib.file}"/>

  <property name="exclude.dirs" value="" />

  <property name="ldapjdk.jar"    value="src/org/globus/mds/gsi/netscape/ldapjdk-patched.jar"/>

  <property name="manifest"    value="MANIFEST.MF"/>


  <path id="classpath">
    <pathelement location="${ldapjdk.jar}"/>
    <fileset dir="lib">
     <include name="*.jar"/>
     <include name="*.zip"/>
    </fileset>
  </path>

  <!-- =================================================================== -->
  <!-- Help                                                                -->
  <!-- =================================================================== -->
  
  <target name="help">
     <echo>
	The following targets can be executed:

            all       - builds and installs the Java CoG Kit components
	    prepare   - creates the build and install directories
		        build location:   ${build.dir}
            compile   - compiles the Java CoG Kit in org.globus 
            javadoc   - creates the documentation
            clean     - removes the class files of the Java CoG Kit in org.globus
            cleanAll  - removes the entire build/ directory 
            release   - creates the next release of the CoG Kit (not for public use)
	    help      - prints out this help message

     </echo>
  </target>

  <!-- =================================================================== -->
  <!-- target: all                                                         -->
  <!-- =================================================================== -->

  <target name="all" depends="prepare,compile,alljars,dist">
      <echo>
	     Building and installing all of the Java CoG Kit components...
      </echo>
  </target>

  <!-- =================================================================== -->
  <!-- Functions                                                           -->
  <!-- =================================================================== -->
  
  <target name="prepare">
	<mkdir dir="${build.dir}"/>
        <mkdir dir="${cog.dst.dir}"/>
  </target>

  <target name="setenv">
    <available property="bouncycastle.present"
        classname="org.bouncycastle.asn1.x509.X509Name"
        classpathref="classpath"/>

    <available property="sasl.present"
        classname="javax.security.sasl.SaslClient"
        classpathref="classpath"/>

    <echo message=""/>
    <echo message="--- Optional Libraries ---" />
    <echo message="sasl.present=${sasl.present}" />
    <echo message=""/>
    <echo message="--- Property values ---" />
    <echo message="debug=${debug}" />
    <echo message="deprecation=${deprecation}" />
    <echo message="optimize=${optimize}" />

  </target>

    <target name="setupVersion">
         <replaceregexp file="${cog.src.dir}/org/globus/common/Version.java"
                         match='String COG_VERSION = ".*"'
                         replace='String COG_VERSION = "${version}"'
                         byline="true"/>

    </target>

  <target name="compile" depends="prepare,setenv, setupVersion">
	<javac  srcdir="${cog.src.dir}" 
		destdir="${cog.dst.dir}"
 		includes="org/**/*.java"
		excludes="${exclude.dirs}"
		classpathref="classpath"
        	debug="${debug}" 
		optimize="${optimize}"
		deprecation="${deprecation}">

        <exclude name="**/org/globus/mds/gsi/jndi/*Wrapper*" 
                 unless="sasl.present"/>

	</javac>

        <copy todir="${cog.dst.dir}" >
                <fileset dir="${cog.src.dir}" includes="**/*.properties" />
                <fileset dir="etc" includes="log4j.properties" />
                <fileset dir="${cog.src.dir}" includes="**/gsi/proxy/test/*.pem" />
                <fileset dir="${cog.src.dir}" includes="**/gsi/test/*.signing_policy" />
        </copy>

  </target>  

  <target name="clean">
     <delete dir="${cog.dst.dir}" />
     <delete dir="${reports.tests}" />
     <delete>
       <fileset dir="." includes="${jars}" />
     </delete>
  </target>

  <!-- =================================================================== -->
  <!-- cleanAll -->
  <!-- =================================================================== -->

  <target name="cleanAll" depends="clean">
        <delete dir="${build.dir}"/>
  </target>

  <!-- =================================================================== -->
  <!-- Jar: all, lib, tools                                                -->
  <!-- =================================================================== -->

  <target name="gtjars" depends="mainJar, urlJar"/>
  <target name="alljars" depends="gtjars, jobmanagerJar"/>

  <target name="mainJar" depends="prepare,compile" >
        <jar    jarfile="${cog.jar.file}"
                basedir="${cog.dst.dir}"
                includes="org/globus/**, org/gridforum/**, *.properties"
                excludes="org/globus/**/tests/**, 
                          org/globus/**/test/**, 
			  org/globus/gatekeeper/**,
                          org/globus/net/protocol/**"
                manifest="etc/${manifest}"
        />
  </target>

  <target name="urlJar" depends="prepare,compile" >
        <jar    jarfile="${cog.url.jar.file}"
                basedir="${cog.dst.dir}"
                includes="org/globus/net/protocol/**" 
                excludes="org/globus/**/tests/**, 
                          org/globus/**/test/**"/>
  </target>

  <target name="jobmanagerJar" depends="prepare,compile" >
        <jar    jarfile="${cog.jobmanager.jar.file}"
                basedir="${cog.dst.dir}"
                includes="org/globus/gatekeeper/**"
                excludes="org/globus/**/tests/**, 
                          org/globus/**/test/**"
        />
  </target>

  <target name="jarlib" depends="prepare,compile" >
        <jar    jarfile="${cog.jar.lib.file}"
                basedir="${cog.dst.dir}"
		excludes="org/globus/**/tests/**"
                includes="org/globus/common/**/*.class,
                          org/globus/gram/**/*.class
			  org/globus/gram/**/*.properties,
			  org/globus/io/**/*.class,
			  org/globus/mds/**/*.class,
			  org/globus/myproxy/**/*.class,
			  org/globus/rsl/**/*.class,
			  org/globus/security/**/*.class,
			  org/globus/net/**/*.class,
			  org/globus/util/**/*.class"
        />
  </target>


  <target name="testPackage" depends="compile">
 	<mkdir dir = "${reports.tests}" />
	<junit printsummary="yes" haltonfailure="yes" timeout="6000">
		<classpath>
                        <!-- pathelement path="src/org/globus/ftp/test" / -->
		        <path refid="classpath"/>
			<pathelement path="${cog.dst.dir}" />
			<pathelement path="${java.class.path}" />
		</classpath>
		<formatter type="plain" />
		<batchtest fork="yes" todir="${reports.tests}">
			<fileset dir="${cog.src.dir}">
			          <include name="${package.test}.java" />
			</fileset>
		</batchtest>
	</junit>
  </target>
  <!-- =================================================================== -->
  <!-- Runs all JUnit tests: needs optional.jar and junit in classpath     -->
  <!-- =================================================================== -->
  <target name="test" depends="compile">
	<mkdir dir = "${reports.tests}" />
	<junit printsummary="yes" haltonfailure="yes" timeout="600000">
		<classpath>
                        <pathelement path="src/org/globus/ftp/test" />
		        <path refid="classpath"/>
			<pathelement path="${cog.dst.dir}" />
			<pathelement path="${java.class.path}" />
		</classpath>

		<formatter type="plain" />

		<batchtest fork="yes" todir="${reports.tests}">
			<fileset dir="${cog.src.dir}">
                           <include name="org/globus/**/tests/**/*Test*.java"/>
                           <include name="org/globus/**/test/**/*Test*.java"/>

                           <exclude name="org/globus/ftp/test/TestEnv.java"/>
			</fileset>
		</batchtest>
	</junit>
  </target>

  <!-- Tests security packages - gsi and security -->
  <target name="testSecurity" depends="compile">
	<mkdir dir = "${reports.tests}" />
	<junit printsummary="yes" haltonfailure="yes" timeout="600000">
		<classpath>
                        <pathelement path="src/org/globus/ftp/test" />
		        <path refid="classpath"/>
			<pathelement path="${cog.dst.dir}" />
			<pathelement path="${java.class.path}" />
		</classpath>

		<formatter type="plain" />

		<batchtest fork="yes" todir="${reports.tests}">
			<fileset dir="${cog.src.dir}">
                           <include 
                           name="org/globus/security/**/test*/**/*Test*.java"/>
                           <include 
                           name="org/globus/gsi/**/test*/**/*Test*.java"/>
			</fileset>
		</batchtest>
	</junit>
  </target>

 <target name="testAll" depends="compile">
        <condition property="jvmarg" value="-Xbootclasspath/p:lib/ldap.jar${path.separator}lib/providerutil.jar">
          <equals arg1="${ant.java.version}" arg2="1.3"/>
        </condition>
        <condition property="jvmarg" value="-Dignore">
         <not>
           <isset property="${jvmarg}"/>
         </not>
        </condition>

        <mkdir dir = "${reports.tests}" />
        <junit printsummary="yes" haltonfailure="no" timeout="600000">
                <classpath>
                        <pathelement path="src/org/globus/ftp/test" />
                        <path refid="classpath"/>
                        <pathelement path="${cog.dst.dir}" />
                        <pathelement path="${java.class.path}" />
                </classpath>

                <formatter type="xml" />

                <batchtest fork="yes" todir="${reports.tests}">
                        <fileset dir="${cog.src.dir}">
                           <include name="org/globus/**/tests/**/*Test*.java"/>
                           <include name="org/globus/**/test/**/*Test*.java"/>

                           <exclude name="org/globus/ftp/test/TestEnv.java"/>
                           <exclude name="org/globus/mds/gsi/**" 
                                    if="mds.tests.disable"/>
                        </fileset>
                </batchtest>

                <jvmarg value="${jvmarg}"/>
                <jvmarg value="-D${testjvmarg}"/> 
        </junit>
  </target>

  <target name="generateTestReport">
   <mkdir dir = "${html.reports}" />
   <junitreport todir="${reports.tests}">
     <fileset dir="${reports.tests}">
       <include name="TEST-*.xml"/>
     </fileset>
     <report format="frames" todir="${html.reports}"/>
   </junitreport>
  </target>

  <!-- =================================================================== -->
  <!-- JavaDoc                                                             -->
  <!-- =================================================================== -->
  
  <target name="doc" depends="javadoc"/>

  <target name="javadoc">
	<mkdir dir="${cog.javadoc.dir}"/>
        <javadoc classpathref="classpath"
		 destdir="${cog.javadoc.dir}"
		 private="false"
		 doctitle="The Java Commodity Grid Kit (v${version})"
		 windowtitle="${project} API"
		 excludepackagenames="org.globus.blank"
		 use="true">
         <link href="http://java.sun.com/j2se/1.3/docs/api/"/>
         <link href="http://www.bouncycastle.org/docs/docs1.3/"/>
         <link href="http://java.sun.com/j2se/1.4.2/docs/api/"/>
         <packageset dir="${cog.src.dir}" defaultexcludes="yes">
          <exclude name="**/tests/**"/>
          <exclude name="**/test/**"/>
        </packageset>
	</javadoc>
       <copy file="${cog.src.dir}/org/globus/gsi/gssapi/Java_GSI_GSSAPI.html" 
             todir="${cog.javadoc.dir}/org/globus/gsi/gssapi" />
  </target>

  <!-- =================================================================== -->
  <!-- Binary distribution                                                 -->
  <!-- =================================================================== -->

  <target name="launcher">
    <echo message="Creating launcher for ${launcher-name}"/>
    <filter token="class" value="${class-name}"/>
    <copy file="etc/unix/launcher-template" 
        tofile="${dist.dir}/bin/${launcher-name}" filtering="true"/>
    <fixcrlf srcdir="${dist.dir}/bin/" eol="lf" includes="${launcher-name}"/>
    <chmod file="${dist.dir}/bin/${launcher-name}" perm="+x"/>
    <copy file="etc/windows/launcher-template" 
          tofile="${dist.dir}/bin/${launcher-name}.bat" filtering="true"/>
    <fixcrlf srcdir="${dist.dir}/bin/" includes="${launcher-name}.bat" eol="crlf" />
  </target>

  <target name="dist" depends="alljars" >
	<mkdir dir="${dist.dir}"/>
	<mkdir dir="${dist.dir}/bin"/>
	<mkdir dir="${dist.dir}/lib"/>
        <mkdir dir="${dist.dir}/etc"/>

	<copy todir="${dist.dir}/lib" >
		<fileset dir="lib">
                   <exclude name="providerutil.jar"/>
                   <exclude name="ldap.jar"/>
                   <exclude name="jndi.jar"/>
                   <exclude name="ldapbp.jar"/>
                   <exclude name="ldapsec.jar"/>
                   <exclude name="jaas.jar"/>           
                </fileset>
	</copy>

        <copy todir="${dist.dir}" >
                <fileset dir="etc" includes="*.html" />
	</copy>

        <copy todir="${dist.dir}/lib" >
                <fileset dir="${build.dir}" includes="*.jar" />
        </copy>

	<copy file="etc/README.TXT" todir="${dist.dir}" />
	<copy file="FAQ.TXT" todir="${dist.dir}" />
        <copy file="CHANGES.TXT" todir="${dist.dir}" />
        <copy todir="${dist.dir}">
           <fileset dir="." includes="LICENSE*.TXT"/>
        </copy>

	<copy file="etc/cog.properties.sample" todir="${dist.dir}/etc" />
	<copy file="etc/log4j.properties" todir="${dist.dir}/etc" />

	<copy file="etc/windows/java.cfg.bat" todir="${dist.dir}/etc" />
	<copy file="etc/windows/lcp.bat" todir="${dist.dir}/etc" />
        <copy file="etc/unix/java.cfg" todir="${dist.dir}/etc" />

       <antcall target="launcher">
           <param name="launcher-name"  value="grid-cert-request"/>
           <param name="class-name"     value="org.globus.tools.GridCertRequest"/>
        </antcall>
        <antcall target="launcher">
	   <param name="launcher-name" 	value="grid-proxy-init"/>
	   <param name="class-name"	value="org.globus.tools.ProxyInit"/>
	</antcall>
        <antcall target="launcher">
	   <param name="launcher-name" 	value="grid-proxy-info"/>
	   <param name="class-name"	value="org.globus.tools.ProxyInfo"/>
	</antcall>
        <antcall target="launcher">
	   <param name="launcher-name" 	value="grid-proxy-destroy"/>
	   <param name="class-name"	value="org.globus.tools.ProxyDestroy"/>
	</antcall>
	<antcall target="launcher">
	   <param name="launcher-name" 	value="grid-cert-info"/>
	   <param name="class-name"	value="org.globus.tools.CertInfo"/>
	</antcall>
	<antcall target="launcher">
	   <param name="launcher-name" 	value="grid-info-search"/>
	   <param name="class-name"	value="org.globus.tools.GridInfoSearch"/>
	</antcall>
	<antcall target="launcher">
	   <param name="launcher-name" 	value="globusrun"/>
	   <param name="class-name"	value="org.globus.tools.GlobusRun"/>
	</antcall>
	<antcall target="launcher">
	   <param name="launcher-name" 	value="globus-url-copy"/>
	   <param name="class-name"	value="org.globus.tools.GlobusUrlCopy"/>
	</antcall>
	<antcall target="launcher">
	   <param name="launcher-name" 	value="globus-gass-server"/>
	   <param name="class-name"	value="org.globus.tools.GassServer"/>
	</antcall>
	<antcall target="launcher">
	   <param name="launcher-name" 	value="globus-gass-server-shutdown"/>
	   <param name="class-name"	value="org.globus.tools.GassServerShutdown"/>
	</antcall>
	<antcall target="launcher">
	   <param name="launcher-name" 	value="globus-personal-gatekeeper"/>
	   <param name="class-name"	value="org.globus.gatekeeper.Gatekeeper"/>
	</antcall>
	<antcall target="launcher">
	   <param name="launcher-name" 	value="grid-change-pass-phrase"/>
	   <param name="class-name"	value="org.globus.tools.ChangePassPhrase"/>
	</antcall>
	<antcall target="launcher">
	   <param name="launcher-name" 	value="myproxy"/>
	   <param name="class-name"	value="org.globus.tools.MyProxy"/>
	</antcall>
	<antcall target="launcher">
	   <param name="launcher-name" 	value="setup"/>
	   <param name="class-name"	value="org.globus.tools.ui.config.ConfigurationWizard"/>
	</antcall>
	<antcall target="launcher">
	   <param name="launcher-name" 	value="globus2jks"/>
	   <param name="class-name"	value="org.globus.tools.KeyStoreConvert"/>
	</antcall>
	<antcall target="launcher">
	   <param name="launcher-name" 	value="visual-grid-proxy-init"/>
	   <param name="class-name"	value="org.globus.tools.proxy.GridProxyInit"/>
	</antcall>
<!-- 
	<antcall target="launcher">
	   <param name="launcher-name" 	value="visual-myproxy"/>
	   <param name="class-name"	value="org.globus.tools.ui.proxy.MyproxyInit"/>
	</antcall>
-->
  </target>



  <target name="distbin" depends="distbinzip, distbingzip"/>

  <target name="distbinzip" depends="dist">
	<zip zipfile="${build.dir}/${dist.name}-bin.zip"
	     basedir="${build.dir}"
	     includes="${dist.name}/**" />
  </target>

  <target name="distbingzip" depends="dist">
     <tar destfile="${build.dir}/${dist.name}-bin.tar.gz" compression="gzip">
      <tarfileset dir="${build.dir}" mode="755">
       <include name="${dist.name}/bin/*"/>
       <exclude name="${dist.name}/bin/*.bat"/>
      </tarfileset>
    <tarfileset dir="${build.dir}">
       <include name="${dist.name}/bin/*.bat"/>
    </tarfileset>
    <tarfileset dir="${build.dir}">
      <include name="${dist.name}/**"/>
      <exclude name="${dist.name}/bin/**"/>
    </tarfileset>
   </tar>
  </target>


  <target name="distdoc" depends="distdoczip, distdocgzip"/>

  <target name="distdoczip" depends="javadoc">
        <zip zipfile="${build.dir}/${dist.name}-doc.zip"
             basedir="${build.dir}"
             includes="${dist.name}/doc/**" />
  </target>

  <target name="distdocgzip" depends="javadoc">
        <antcall target="targzip">
           <param name="tar.file"    value="${build.dir}/${dist.name}-doc.tar"/>
           <param name="tar.basedir" value="${build.dir}"/>
           <param name="tar.includes" value="${dist.name}/doc/**"/>
        </antcall>
  </target>

  <target name="distsrc" depends="release, distsrczip, distsrcgzip"/>

  <target name="distsrcgzip" depends="prepare" >
        <antcall target="targzip">
           <param name="tar.file"    value="${build.dir}/${dist.name}-src.tar"/>
           <param name="tar.basedir" value="."/>
           <param name="tar.includes" value="${dist.name}/**"/>
        </antcall>
  </target>

  <target name="distsrczip" depends="prepare">
        <zip zipfile="${build.dir}/${dist.name}-src.zip"
             basedir="."
             includes="${dist.name}/**" />
  </target>

  <target name="targzip">
     <tar tarfile="${tar.file}" basedir="${tar.basedir}" includes="${tar.includes}"/>
     <gzip zipfile="${tar.file}.gz" src="${tar.file}" />
     <delete file="${tar.file}" />
  </target>

  <!-- =================================================================== -->
  <!-- Release stuff - works only on pitcairn.mcs.anl.gov                  -->
  <!-- =================================================================== -->

  <target name="release">
        <cvspass cvsroot=":pserver:anonymous@cvs.globus.org:/home/dsl/cog/CVS"
                 password="" passfile="cvspass.pwd" />
	<cvs cvsRoot=":pserver:anonymous@cvs.globus.org:/home/dsl/cog/CVS"
             passfile="cvspass.pwd" 
	     package="jglobus"
	     dest="."
	     command="export -D now -d ${dist.name}"
	/>
  </target>

  <!-- Two distribution locations at ANL            -->
  <!--  o /mcs/www-unix.globus.org/cog/distribution -->
  <!--  o /mcs/ftp.globus.org/pub/cog/java          --> 
	
  <target name="publishAll">
    <property name="publish.dir" value="/home/gawor/cog/cog2" />

    <antcall target="publishAny">
      <param name="publish.dir" value="${publish.dir}" />
      <param name="suffix" value="bin.zip" />
    </antcall>

    <antcall target="publishAny">
      <param name="publish.dir" value="${publish.dir}" />
      <param name="suffix" value="bin.tar.gz" />
    </antcall>

    <antcall target="publishAny">
      <param name="publish.dir" value="${publish.dir}" />
      <param name="suffix" value="doc.tar.gz" />
    </antcall>

    <antcall target="publishAny">
      <param name="publish.dir" value="${publish.dir}" />
      <param name="suffix" value="src.tar.gz" />
    </antcall>

  </target>  

  <target name="publishAny">

        <copy file="${build.dir}/${dist.name}-${suffix}" todir="${publish.dir}" />

        <!-- used 'rm' because delete file task does not work on soft links -->
        <exec dir="${publish.dir}" executable="rm">
          <arg line="cog-latest-${suffix}"/>
        </exec>

        <exec dir="${publish.dir}" executable="ln">
          <arg line="-s ${dist.name}-${suffix} cog-latest-${suffix}"/>
        </exec>

  </target>

 <target name="rslParser" unless="${javacc.home}" >
   <javacc target="src/org/globus/rsl/RSLParser.jj"
           outputdirectory="src/org/globus/rsl" 
           javacchome="${javacc.home}" />

 </target>

 <target name="toUnix">
   <fixcrlf srcdir="${cog.src.dir}"
       eol="lf"
       includes="**/*.java"/>
 </target>

 <!-- =================================================================== -->
 <!-- PMD                                                                 -->
 <!-- =================================================================== -->

 <target name="pmd">
   <taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask"/>
   <pmd rulesetfiles="${pmd.rules}" shortFilenames="true">
     <formatter type="html" toFile="pmd_report.html"/>
      <fileset dir="${cog.src.dir}">
         <include name="**/*.java"/>
         <exclude name="**/test/**"/>
         <exclude name="**/tests/**"/>
      </fileset>
   </pmd>
 </target>

 <!-- =================================================================== -->
 <!-- FindBugs                                                            -->
 <!-- =================================================================== -->

 <target name="findbugs">
    <taskdef name="findbugs" 
             classname="edu.umd.cs.findbugs.anttask.FindBugsTask"/>
    <property environment="env"/>
    <findbugs home="${env.FINDBUGS_HOME}" output="html" 
              outputFile="findbugs_report.html" jvmargs="-Xmx1024m"  >
      <auxClasspath>
         <pathelement location="${ldapjdk.jar}"/>
         <fileset dir="${basedir}/lib">
              <include name="*.jar"/>
         </fileset>
      </auxClasspath>
      <class location="${cog.jar.file}" />
      <class location="${cog.url.jar.file}" />
    </findbugs>
  </target>

 <!-- =================================================================== -->
 <!-- Clover                                                              -->
 <!-- =================================================================== -->

 <taskdef resource="clovertasks"/>

 <target name="initClover">
   <mkdir dir="clover-reports"/>
   <clover-setup initString="clover-reports/coverage.db">
      <fileset dir="${cog.src.dir}">
         <include name="**/*.java"/>
         <exclude name="**/test/**"/>
         <exclude name="**/tests/**"/>
      </fileset>
   </clover-setup>
 </target>

 <target name="generateCloverReport" depends="initClover">
   <clover-report>
      <current outfile="clover-reports-html" title="Java CoG Kit Unit Tests">
         <format type="html"/>
      </current>
   </clover-report>
</target>

</project>
